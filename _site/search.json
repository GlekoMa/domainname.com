[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\nThis is a post with executable code.\n\n\n\n\n\n\nApr 16, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "使用Quarto构建，代码由GitHub托管，Netlify提供服务器支持。"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "Polar Axis\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html#一般注释",
    "href": "index.html#一般注释",
    "title": "Blog",
    "section": "一般注释",
    "text": "一般注释\n\nP17 “2.2 RStudio”\n在启动或退出时，建议不要恢复或保存.RData文件。\n这点其他R书籍可能没有顾及到，但设置成“Never”确实能方便许多。\n\n\nP61 “6.2 读取Excel数据”\n书中只提到读取Excel文件可以使用readxl包；如果想写入Excel文件的话，可以使用openxlsx包。"
  },
  {
    "objectID": "index.html#特殊注释",
    "href": "index.html#特殊注释",
    "title": "Blog",
    "section": "特殊注释",
    "text": "特殊注释\n\nP14 “2.2 RStudio”\n本节中讲了一些RStudio里的快捷键，补充如下（Windows）：\n\nAlt + - ：快速输入“ <- ”\nCtrl + Shift + M ：快速输入“ %>% ”（或“ |> ”，可以在RStudio中设置）\nCtrl + Alt + R ：运行当前脚本所有内容\nShift + Enter ：在控制台中换行\nCtrl + Shift +N ：新建脚本\nCtrl + S ：保存脚本\nCtrl + W ：关闭当前脚本\nCtrl + Shift + W ：关闭所有脚本\n\n\n\nP40 “4.8 管道”\n本节中有代码如下：\n::: {.cell}\nlibrary(magrittr)\nx <- 1:10\nmean(x)\n\n[1] 5.5\n\n:::\n\nx %>% mean\n\n[1] 5.5\n\n\n这里的x %>% mean也可以写成x %>% mean()。事实上，R 4.1版本后，原生支持管道，但管道符写法与magrittr包不同，写作 |> ，实现原理和用法也略有不同，比如，使用 |> 必须写成x |> mean()而不能写成x |> mean，统计之都有与此相关的讨论贴\n\n\nP46 “5.1 数据框”\n本节中有代码如下：\nx <- 10:1\ny <- -4:5\nq <- c(\"Hockey\",\"Football\",\"Baseball\",\"Curling\",\"Rugby\",\n       \"Lacrosse\",\"Basketball\",\"Tennis\",\"Cricket\",\"Soccer\")\ntheDF <- data.frame(First=x,Second=y,Sport=q)\n#省略···\nclass(theDF[,\"Sport\"])\n书中给出的结果为\n[1] \"factor\"\n但实际运行结果应为\n[1] \"character\"\n这是因为书中使用的R版本为3.4.0，而R自4.0.0版本以后，更新为默认使用stringAsFactors = FALSE，即不再默认将数据框（data.frame）中的列向量转换为factor（因子）向量，所以实际运行结果会与书中有所差异。\nR 4.0.0于2020年4月24日发布，也就是说所有早于这个时间出版的书目都会存在相关问题。因此阅读一些相关资料时应当时刻注意到这个差异。\n\n\nP53 “5.2 列表”\n本节有如下叙述：\n“偶尔对列表或向量或数据框增加元素都还好，但是，如果反复这样做计算代价就太高了。所以最好创建指定长度的列表，然后通过合适的索引增加元素。”\n如果没看懂这段描述的话，学完循环相关章节后，阅读下面两段代码：\n事先指定了变量output的长度： ::: {.cell}\n#system.time函数可以计算一段代码的运行时间\nsystem.time({\n output <- rep(NA, 10000000)\n for (i in 1:10000000) {\n output[i] <- i + 1\n }\n})\n\n用户 系统 流逝 \n0.72 0.00 0.72 \n\n::: 未事先指定output的长度： ::: {.cell}\nsystem.time({\n output <- NA\n for (i in 1:10000000) {\n output[i] <- i + 1\n }\n})\n\n用户 系统 流逝 \n3.37 0.19 3.58 \n\n::: 可以看出前者的运行速度大约是后者的3.6倍。原因是在后者中，R不得不每次循环都扩充一次output变量的长度。即每次循环，R都需要在计算机内存中复制原长度的output变量，同时腾出一块容量更大的区域，用来存储新长度的output变量，最后把原位置的output变量清除。在后一段代码中，这一系列创建、复制、粘贴、删除的繁琐操作共进行了10000000次！而前者的写法就很好地避免了这个问题！\n\n\nP61 “6.2 读取Excel数据”\n本节中有代码如下：\ndownload.file(url='http://www.jaredlander.com/data/ExcelExample.xlsx',\n              destfile='data/ExcelExample.xlsx',method='curl')\n运行应该会报错：\nError in download.file(url = \"http://www.jaredlander.com/data/ExcelExample.xlsx\",  : \n  'curl' call had nonzero exit status\n报错原因在于保存路径不对，因为本地的R工作目录可能与作者的不同，工作目录可以用getwd()查看，很可能本地工作目录下面没有创建data文件夹，于是报错。手动创建一个data文件夹即可。\n但事情没有这么简单，即使不再报错，从网页写到本地的也可能（或者说一定）只是一个1KB的xlsx文件，也就是说无法使用，即这次写入其实是失败了。具体原因我不清楚，经查找资料,可以改为这样写（即可成功）：\ndownload.file(url='http://www.jaredlander.com/data/ExcelExample.xlsx',\n              destfile='data/ExcelExample.xlsx',mode='wb')\n\n\nP68 “6.7 读取网页数据*”\n本节有代码如下：\nlibrary(XML)\ntheURL <- \"http://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/\"\nbowlPool <- readHTMLTable(theURL,which=1,header=FALSE,stringsAsFactors=FALSE)\n运行应该会报错：\nError: failed to load external entity \"http://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/\"\n原因我尚未探究，web方面的我比较欠缺，暂只留待以后解决。\n不过若换用课本紧接提到的rvest包，则就可以成功提取：\nlibrary(rvest)\ntheURL <- \"http://www.jaredlander.com/2012/02/another-kind-of-super-bowl-pool/\"\nbowlPool <- read_html(theURL) %>% \n                 html_element(\"table\") %>% \n                 html_table()\n#read_html() 爬取页面源代码\n#html_element() 提取网页中指定元素的部分\n#html_table() 根据提取的元素生成数据框或列表\n课本后面提取特定元素使用的函数是html_nodes（现在还可以使用），官网现在已经没有 这个函数的介绍了，其新的替代函数是html_elements。html_element和html_elements有所 不同，加“s”最终返回的会是一个列表。\nTip：XML包很经典，Hadley Wickham参考它开发了xml2包（2015年的blog），两个包孰优孰劣，因为我尚未探究，所以不得而知。\n\n\nP82 “7.2 ggplot2”\n本节有代码如下：\necon2000 <- economics[which(economics$year >= 2000),]\n去掉which也可以： ::: {.cell}\nlibrary(ggplot2)\nlibrary(lubridate)\neconomics$year <- year(economics$date)\necon2000 <- economics[which(economics$year >= 2000),]\nre_econ2000 <- economics[economics$year >= 2000,]\nall(econ2000 == re_econ2000)\n\n[1] TRUE\n\n::: （或者说使用which可以提高运行效率？暂按。）\n\n\nP109 “11.3 plyr包”\n本节有代码如下：\n<1>\n<2>\n课本中两者的运行时间分别为0.31和0.19，而这里的运行结果是88.89和94.59，为何两个结果不一致，不清楚。不过也许不重要，作者后面也提到将数据集转换为idata.frame格式能不能提高效率还得挑数据集。😵\n<3>\n现在测试使用data.table的效率： ::: {.cell}\nlibrary(data.table)\ndata(baseball,package = \"plyr\")\nbBaseball = data.table(baseball)\nsystem.time(\n  replicate(1000,\n            bBaseball[,list(nrow=length(year)),by=id]\n            )\n)\n\n用户 系统 流逝 \n5.74 1.14 7.34 \n\n#这里使用的是length，原因是nrow在这儿用不了。\n#事实上如果把上面的两段代码换成length，运行时间几乎与使用nrow相同。\n::: 仅用时两秒！😮\n<4>\n再测试使用dplyr包的效率： ::: {.cell}\nlibrary(dplyr)\ndata(baseball,package = \"plyr\")\ndBaseball = tibble(baseball)\nsystem.time(\n  replicate(1000,\n            dBaseball %>% \n              group_by(id) %>% \n              summarize(nrow=nrow(year))\n            )\n)\n\n 用户  系统  流逝 \n16.34  0.50 16.98 \n\n::: 用时十秒。\n\n\nP139 “12.11 dplyr使用数据库”\n本节有代码如下：\ndownload.file(\"http://www.jaredlander.com/data/diamonds.db\",\n              destfile=\"data/diamonds.db\",mode = \"wb\")\ndiaDBSource <- src_sqlite(\"data/diamonds.db\")\n提示错误：找不到src_sqlite函数。原因是作者写作时dplyr包的版本为0.6，现在则为1.0.7。而1.0.0版本的相关更新说明如下：\n\nsrc_mysql(), src_postgres(), and src_sqlite() has been deprecated. We’ve recommended against them for some time. Instead please use the approach described at https://dbplyr.tidyverse.org/.\n\n即现在建议使用dbplyr（dplyr的支援包）来操纵数据库。dbplyr官网中的写法已经不再使用src_sqlite函数，而是改用书中提到的另一种应用面更广的方法：使用DBI::dbConnect()函数。\n\n\nP172 “16.3 提取文本”\n本节有代码如下：\nlibrary(XML)\nload(\"dadta/presidents.rdata\")\ntheURL <- \"http://www.loc.gov//rr/print/list/057_chron.html\"\npresidents <- readHTMLTable(theURL,which=3,as.data.frame=TRUE,\n                           skip.rows=1,header=TRUE,stringsAsFactors=FALSE)\n运行应该会报错：\nError: failed to load HTTP resource\n进入这个网址，会发现其设置了验证程序以防止爬取数据。\n解决办法：人工复制这个网页的html源代码，保存为本地html文件，然后从本地爬取。\n第二种爬取办法：保存到本地后，使用之前书上介绍过的rvest包。可以直接爬取出正确的表：\nlibrary(rvest)\n#假设文件被保存为bb.html\ntheURL <- \"bb.html\"\npresidents2 <- (read_html(theURL) %>% \n    html_elements(\"table\") %>% \n    html_table())[[4]]"
  },
  {
    "objectID": "index.html#运行环境",
    "href": "index.html#运行环境",
    "title": "Blog",
    "section": "运行环境",
    "text": "运行环境\n\ndevtools::session_info()\n\n- Session info ---------------------------------------------------------------\n setting  value\n version  R version 4.1.3 (2022-03-10)\n os       Windows 10 x64 (build 22000)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Chinese (Simplified)_China.936\n ctype    Chinese (Simplified)_China.936\n tz       Asia/Taipei\n date     2022-04-16\n pandoc   2.17.1.1 @ D:/Program Files/RStudio/bin/quarto/bin/ (via rmarkdown)\n\n- Packages -------------------------------------------------------------------\n package     * version date (UTC) lib source\n assertthat    0.2.1   2019-03-21 [1] CRAN (R 4.1.3)\n brio          1.1.3   2021-11-30 [1] CRAN (R 4.1.3)\n cachem        1.0.6   2021-08-19 [1] CRAN (R 4.1.3)\n callr         3.7.0   2021-04-20 [1] CRAN (R 4.1.3)\n cli           3.2.0   2022-02-14 [1] CRAN (R 4.1.3)\n colorspace    2.0-3   2022-02-21 [1] CRAN (R 4.1.3)\n crayon        1.5.1   2022-03-26 [1] CRAN (R 4.1.3)\n data.table  * 1.14.2  2021-09-27 [1] CRAN (R 4.1.3)\n DBI           1.1.2   2021-12-20 [1] CRAN (R 4.1.3)\n desc          1.4.1   2022-03-06 [1] CRAN (R 4.1.3)\n devtools      2.4.3   2021-11-30 [1] CRAN (R 4.1.3)\n digest        0.6.29  2021-12-01 [1] CRAN (R 4.1.3)\n dplyr       * 1.0.8   2022-02-08 [1] CRAN (R 4.1.3)\n ellipsis      0.3.2   2021-04-29 [1] CRAN (R 4.1.3)\n evaluate      0.15    2022-02-18 [1] CRAN (R 4.1.3)\n fansi         1.0.3   2022-03-24 [1] CRAN (R 4.1.3)\n fastmap       1.1.0   2021-01-25 [1] CRAN (R 4.1.3)\n fs            1.5.2   2021-12-08 [1] CRAN (R 4.1.3)\n generics      0.1.2   2022-01-31 [1] CRAN (R 4.1.3)\n ggplot2     * 3.3.5   2021-06-25 [1] CRAN (R 4.1.3)\n glue          1.6.2   2022-02-24 [1] CRAN (R 4.1.3)\n gtable        0.3.0   2019-03-25 [1] CRAN (R 4.1.3)\n htmltools     0.5.2   2021-08-25 [1] CRAN (R 4.1.3)\n htmlwidgets   1.5.4   2021-09-08 [1] CRAN (R 4.1.3)\n jsonlite      1.8.0   2022-02-22 [1] CRAN (R 4.1.3)\n knitr         1.38    2022-03-25 [1] CRAN (R 4.1.3)\n lifecycle     1.0.1   2021-09-24 [1] CRAN (R 4.1.3)\n lubridate   * 1.8.0   2021-10-07 [1] CRAN (R 4.1.3)\n magrittr    * 2.0.2   2022-01-26 [1] CRAN (R 4.1.3)\n memoise       2.0.1   2021-11-26 [1] CRAN (R 4.1.3)\n munsell       0.5.0   2018-06-12 [1] CRAN (R 4.1.3)\n pillar        1.7.0   2022-02-01 [1] CRAN (R 4.1.3)\n pkgbuild      1.3.1   2021-12-20 [1] CRAN (R 4.1.3)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.1.3)\n pkgload       1.2.4   2021-11-30 [1] CRAN (R 4.1.3)\n prettyunits   1.1.1   2020-01-24 [1] CRAN (R 4.1.3)\n processx      3.5.3   2022-03-25 [1] CRAN (R 4.1.3)\n ps            1.6.0   2021-02-28 [1] CRAN (R 4.1.3)\n purrr         0.3.4   2020-04-17 [1] CRAN (R 4.1.3)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.1.3)\n remotes       2.4.2   2021-11-30 [1] CRAN (R 4.1.3)\n rlang         1.0.2   2022-03-04 [1] CRAN (R 4.1.3)\n rmarkdown     2.13    2022-03-10 [1] CRAN (R 4.1.3)\n rprojroot     2.0.3   2022-04-02 [1] CRAN (R 4.1.3)\n rstudioapi    0.13    2020-11-12 [1] CRAN (R 4.1.3)\n scales        1.1.1   2020-05-11 [1] CRAN (R 4.1.3)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.1.3)\n stringi       1.7.6   2021-11-29 [1] CRAN (R 4.1.2)\n stringr       1.4.0   2019-02-10 [1] CRAN (R 4.1.3)\n testthat      3.1.3   2022-03-29 [1] CRAN (R 4.1.3)\n tibble        3.1.6   2021-11-07 [1] CRAN (R 4.1.3)\n tidyselect    1.1.2   2022-02-21 [1] CRAN (R 4.1.3)\n usethis       2.1.5   2021-12-09 [1] CRAN (R 4.1.3)\n utf8          1.2.2   2021-07-24 [1] CRAN (R 4.1.3)\n vctrs         0.3.8   2021-04-29 [1] CRAN (R 4.1.3)\n withr         2.5.0   2022-03-03 [1] CRAN (R 4.1.3)\n xfun          0.30    2022-03-02 [1] CRAN (R 4.1.3)\n yaml          2.3.5   2022-02-21 [1] CRAN (R 4.1.2)\n\n [1] D:/Program Files/R/R-4.1.2/library\n [2] D:/Program Files/R/R-4.1.3/library\n\n------------------------------------------------------------------------------"
  }
]
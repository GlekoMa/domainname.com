---
title: "Post With Code"
author: "Gleko Ma"
date: "2022/5/3"
categories: [code]
image: "image.jpg"
jupyter: python3
---

A few tips for beginner.

## 变量和对象

### Python中变量的实质为指针

在Python中给变量赋值很简单，只需把变量名和要赋予的值用等号连接起来即可，例如：
```{python}
# 把4赋给x
x = 4
```
这个赋值操作非常自然且直接，但它的本质可能跟你想的不太一样。
在很多编程语言里（例如C、R），变量都可以认为是一个盛装数据的容器。例如在C中，你可以这样写：
```{c}
int x = 4;
```
这行代码的全部意思就是：你让计算机定义了一小块儿内存，名叫``x``，然后把值``4``放了进去。但是，在Python中，``x = 4``的意思并不是这样的。Python中的变量是一个指向内存的指针而非这块儿内存本身。下面看一个简单的例子：
```{python}
x = [1, 2, 3]
y = x
print(y)
x.append(4) # 给列表x添加一个4
print(y)
```
我们只改变了``x``的值，``y``的值却也发生了相同的变化！下面对这个例子做一些延伸：
```{python}
x = 'Hello'
print(y)
```
可以肯定，``x``的值发生了变化。而``y``的值却没有变。

Python中的变量其实只是徒有虚名，它只是一个名字而已，当你调用它时，例如：调用``x``时，计算机就去访问``x``这个变量指向的那块儿内存，一看这个内存里头的值是[1, 2, 3]，于是计算机就返回给你[1, 2, 3]。然后你又执行``y = x``，计算机又把``y``指向``x``，一看``x``不是块儿内存，它只是一个指针，于是顺藤摸瓜，``y``就直接指向了原来的那块儿内存[1, 2, 3]。所以说这两个赋值操作其实只创建了一块儿内存，``x``和``y``共用它。当你执行``x.append(4)``时，计算机直接对所指向的那块儿内存进行操作，于是那块儿内存的值变为了[1, 2, 3, 4]，所以此时你再输出``y``的话，它所指向的值现在是[1, 2, 3, 4]，于是输出给你就是[1, 2, 3, 4]，而不是原来的[1, 2, 3]了。

所以说，一句话，Python中``x = 4``不要读作“把``4``赋予``x``”，而应该读成“``x``指向``4``”。

还记得上面的c代码吗？它是这样写的：
```{c}
int x = 4
```
你肯定发现它多了一个``int``，而且不加这个``int``它就会运行出错，所犯错误为：没有指定变量类型。但我们在Python中就可以直接这样写：``x = 4``，千万不要以为Python中的变量没有类型，其实只是``x``这个变量名没有类型，实际``x``所指向的内存``4``是有类型（int类型）的。你可以这样写：
```{python}
x = 4 # x是一个整数
x = 'hello' # 现在x是一个字符串
x = [1, 2, 3] # 现在x是一个列表
```
在c中，一旦你声明了``int x = 4``，那它就是整型数字，你后面就不能再给它赋成字符串，会报错。而Python中``x``是一个指针，你可以让它指向任何类型的数据（当``x``指向其他值时，如果原来的值没有被什么变量指向，那这块儿应该就被自动清理了，我认为大概是这样，没有查过）。所以常说Python是动态语言，意思其实就是它的变量类型可变，而c就不是动态的。

当我们说Python中的“变量”时，我们指的是什么？例如：
```{python}
x = 4
```
直接说结论，我认为，``x``是变量、是变量名、是指针。而当我们说变量``x``时，我们通常想要表达的是变量名``x``与它所指向的那块儿内存``4``这个捆绑体。但它的本质其实只是一副躯壳，一个名字而已。
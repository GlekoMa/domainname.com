---
title: "Quarto Template for CUMCM"
date: "2022/4/18"
categories: [news]
page-layout: full
image: "hello.jfif"
---

Last updated: May 9 2022

## 概述

### 引文

一个统计或数据分析的科研项目， 都会产生一个或多个研究报告。 因为使用统计与数据分析不可避免地有很多计算涉及在内， 这里假设使用R软件做了计算。 科研是一个不断改进的过程， 所以每一次重新做了计算， 研究报告中的汇总表格、图形都要更新。 这样的任务比较繁琐， 也容易出错。

“文学式编程”(literate programming, (Knuth 1984))是这样一种思想， 把撰写报告与计算程序有机地结合在一起， 用一个源文件既包含报告内容， 又包含计算程序。 每次产生研究报告时， 先运行源文件中的计算程序得到计算结果， 这些结果包括文字性内容与图形， 然后利用适当软件自动地把这些原始文字、计算结果组合成最终的报告。 利用这样的思想， 可以自动生成重复的例行报告， 还可以作为“可重复科学研究”的载体。

（引自：李东风 | R语言教程）

### 关于Quarto
<br />
[Quato](https://quarto.org/)是一个开源的科技出版系统，支持Jupyter、RStudio和VS Code等多种代码编辑器。其官方描述如下：

- 创建代码与文本结合的可动态编译内容。支持Python、R、Julia和Observable。

- 使用markdown文本或Jupyter笔记本的形式进行编译。

- 渲染高质量论文、报告、幻灯片、网站、博客和书籍，并以HTML、PDF、MS Word、ePub或其他格式输出。

- 支持数学公式、引文、交叉引用、图表、标注、高级布局以及其他特性。

### 使用须知
<br />
本文主要介绍Quarto在数学建模论文排版上的应用。关于此数学建模论文模板的使用，需要声明以下几点：

1. 该模板谨按照全国大学生数学建模竞赛的标准进行设计，不适用于美赛、深圳杯等其他数学建模赛事。

2. 本模板仅适合对排版要求不高的朋友采用。模板主要使用LaTeX编写，由于一篇论文的编译流程大致为：ipynb/qmd -> md -> Pandoc -> PDF，层层抽象过多，故自定义排版布局对使用者相关知识的要求较高，且一旦编写格式逾矩，排错难度较大。

3. 对模板的过度依赖会导致使用者个人的排版能力下降，即使理想的未来情况为内容创作者不再需要为各式样的排版劳心，但就目前来说，社会对于个人的排版能力仍然有一定要求。

## 应用范例

::: hello-cumcm-banner
<ul class="nav nav-pills" id="hello-cumcm-tab" role="tablist">

<li class="nav-item" role="presentation">

<button class="nav-link active" id="jupyter-tab" data-bs-toggle="tab" data-bs-target="#jupyter" type="button" role="tab" aria-controls="jupyter" aria-selected="true">

Jupyter

</button>

</li>

<li class="nav-item" role="presentation">

<button class="nav-link" id="rstudio-tab" data-bs-toggle="tab" data-bs-target="#rstudio" type="button" role="tab" aria-controls="rstudio" aria-selected="false">

RStudio

</button>

</li>

</ul>
:::

::: {style="width:790px;overflow:auto;"}
::: {#hello-cumcm-tabcontent .tab-content}
::: {#jupyter .tab-pane .fade .show .active role="tabpanel" aria-labelledby="jupyter-tab"}
::: {style="height:500px;width:770px;overflow:auto;"}

在Jupyter中使用数学建模论文模板，只需为原Jupyter Notebook笔记本添加YAML头（raw模式），然后使用Quarto编译，即可渲染为指定论文格式。

::: grid
::: {.g-col-lg-6 .g-col-12}
``` markdown
=============raw代码块=============

---
#-----YAML文件-----#
crossref: 
  fig-prefix: 图   # 设置引用格式
  tbl-prefix: 表
  eq-prefix: ""
format: 
  pdf:
    template: stulink.tex
    keep-tex: true
  html:
    toc: true
    toc-depth: 4
    code-fold: true
#--队伍信息及摘要页--#
NO: 一
group: 1707
school: stulink大学
#-------------------
name1: 蛋卷
class1: 成都1店
number1: 1000000000
#-------------------
name2: 烤肉
class2: 成都2店
number2: 1000000001
#-------------------
name3: 麻辣拌
class3: 成都3店
number3: 1000000002
#-------------------
time: 2022年3月
preface: yes  # 是否显示组队信息
title: "暴雨将至"
abstract: |-
  摘要第一段
  
  摘要第二段
keyword: 别问 \ 问就是一只猪
---

==========Markdown代码块===========

# Jupyter Demo

## 基础

### 数学公式

#### 质能方程

$$
E = mc^2
$$ {#eq-质能方程}

#### 自动编号

$$
G = mg
$$ {#eq-重力公式}

#### 无编号公式

$$
\text{s.t.} = 
\begin{cases}
x + y\\
x - y
\end{cases}
$$

### 表格及图片

#### 符号说明

| 符号  | 说明        | 单位 |
|-------|-------------|------|
| $x_i$ | 第$i$次相遇 | 毫厘 |
| $y_j$ | 第$j$次错过 | 千里 |

: 符号说明 {#tbl-符号说明}

#### MIT LOGO

![麻省理工学院](mit_logo.png){fig.pos="H" width="50%" height="17.5%"}


#### 代码输出

===========Python代码块============

#| echo: false
#| fig.pos: "b"
#| label: fig-螺旋
#| fig-cap: "螺旋图"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()

==========Markdown代码块===========

## 引用

引用质能方程([-@eq-质能方程])、符号说明[-@tbl-符号说明]、螺旋图[-@fig-螺旋]。
```
:::

::: {.hello-output .g-col-lg-6 .g-col-12}
![](images/jupyter-output.png)
:::
:::
:::
:::

::: {#rstudio .tab-pane .fade role="tabpanel" aria-labelledby="rstudio-tab"}
::: {style="height:500px;width:770px;overflow:auto;"}
RStudio为数学公式的输入提供了可视化。分为Source和Visual两种编辑模式，其中Visual模式提供了一些插件以便捷插入图表、代码块等。

::: grid
::: {.g-col-lg-6 .g-col-12}
````markdown
---
#------YAML文件------#
crossref: 
  fig-prefix: 图   # 设置引用格式
  tbl-prefix: 表
  eq-prefix: ""
format: 
  pdf:
    template: stulink.tex
    keep-tex: true
  html:
    toc: true
    toc-depth: 4
    code-fold: true
#--队伍信息及摘要页--#
NO: 一
group: 1707
school: stulink大学
#---------------------
name1: 蛋卷
class1: 成都1店
number1: 1000000000
#---------------------
name2: 烤肉
class2: 成都2店
number2: 1000000001
#---------------------
name3: 麻辣拌
class3: 成都3店
number3: 1000000002
#---------------------
time: 2022年3月
preface: yes  # 是否显示组队信息
title: "暴雨将至"
abstract: |-
  摘要第一段
  
  摘要第二段
keyword: 别问 \ 问就是一只猪
---

# Jupyter Demo

## 基础

### 数学公式

#### 质能方程

$$
E = mc^2
$$ {#eq-质能方程}

#### 自动编号

$$
G = mg
$$ {#eq-重力公式}

#### 无编号公式

$$
\text{s.t.} = 
\begin{cases}
x + y\\
x - y
\end{cases}
$$

### 表格及图片

#### 符号说明

| 符号  | 说明        | 单位 |
|-------|-------------|------|
| $x_i$ | 第$i$次相遇 | 毫厘 |
| $y_j$ | 第$j$次错过 | 千里 |

: 符号说明 {#tbl-符号说明}

#### MIT LOGO

![麻省理工学院](mit_logo.png){fig.pos="H" width="50%" height="17.5%"}

#### R代码输出

```{{r}}
#| echo: false
#| fig.pos: H
#| label: fig-空气质量
#| fig-cap: 温度与臭氧浓度
#| warning: false

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess"
)
```

#### Python代码输出

```{{python}}
#| echo: false
#| fig.pos: H
#| label: fig-螺旋
#| fig-cap: "螺旋图"

import numpy as np
import matplotlib.pyplot as plt

r0 = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r0
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r0)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

\newpage

#### Python与R的相互调用

\indent

```{{r}}
# R代码
df = data.frame(
  "a" = 1:3,
  "b" = 4:6
)
df[["a"]]
```

```{{python}}
# Python代码
import numpy as np
data = r.df
data[["a"]]
```

## 引用

引用质能方程([-@eq-质能方程])、符号说明[-@tbl-符号说明]、空气质量图[-@fig-空气质量]。
````
:::

::: {.hello-output .g-col-lg-6 .g-col-12}
![](images/rstudio-output.png)
:::

:::
:::
:::
:::
:::

## 使用指南

### 准备工作
<br />

1. 从[Quato](https://quarto.org/)官网下载并安装软件

2. 使用终端（Terminal）执行命令：
````markdown
quarto tools install tinytex
````

3. 把以下路径加入环境变量：
``` bash
# 注意改成你的用户名
C:\Users\用户名\AppData\Roaming\TinyTeX\bin\win32
```

### 选择编辑器

::: {.grid .step .column-page-left}
::: {.tool .g-col-lg-12 .g-col-12}

　　　　　　

<a href="hello/jupyter.html" role="button" class="btn btn-outline-light">
![](images/jupyter-logo.png){width="77"}Jupyter
</a>

<a href="hello/rstudio.html" role="button" class="btn btn-outline-light">
![](images/rstudio-logo.png){width="77"}RStudio
</a>

<a href="hello/vscode.html" role="button" class="btn btn-outline-light">
![](images/vscode-logo.png){width="77"}VS Code
</a>

:::
:::

### 数学公式

Quarto使用LaTeX格式的数学公式。LaTeX数学公式是计算机中最为广泛使用的公式输入格式，大多数文字或文档编辑软件都对LaTeX数学公式提供支持，例如：Word、Jupyter、Matlab等。下面介绍Quarto中数学公式的输入。

LaTeX中数学公式的输入分两种模式：行内模式（\$ ... \$）与行间模式
````markdown
$$
...
$$
````
前者是在正文的行文中插入数学公式；后者单独成行，且自动居中。

例如``$E=mc^2$``显示为$E=mc^2$,而
````markdown
$$
E=mc^2
$$
````
则显示为：
$$
E=mc^2
$$

输入带自动编号的公式则需要使用Quarto的交叉引用功能，例如：
````markdown
$$
E=mc^2
$$ {#eq-einstein}

# 第二个$$和{}间的空格不能少
````
显示为：
$$
E=mc^2
$$ {#eq-einstein}

交叉引用功能留待后面小节进行介绍。

### 图片与表格

Quarto的图片及表格插入使用Markdown语法。

#### 插入图片

图片插入请使用'!+[图片名]+(路径/链接)'的形式，支持插入的图片格式包括JPG、PNG、PDF等（不支持SVG），例如：
````markdown
![MIT LOGO](images/mit.png){#fig-MIT}

# “{#fig-MIT}”的用处将在后面进行说明
````
显示为：

![MIT LOGO](images/mit.png){#fig-MIT}

特别的，针对PDF输出，可在``![]()``后添加``{}``控制输出样式，例如：
````{markdown}
![](images/mit.png){fig.pos="H" width="50%" height="25%"}
````
代表禁止图片浮动（有时会失效）、图片宽度占PDF页面的50%，高度占页面的25%。

#### 插入表格

例如：
````markdown
| 符号  | 说明        | 单位 |
|-------|-------------|------|
| $x_i$ | 第$i$次相遇 | 毫厘 |
| $y_j$ | 第$j$次错过 | 千里 |

: 符号说明 {#tbl-符号说明}

# “: 符号说明” 代表指定表格名称
# “{#tbl-符号说明}”的用处将在后面进行说明,其与表名间的空格不可省略
````
显示为：

| 符号  | 说明        | 单位 |
|-------|-------------|------|
| $x_i$ | 第$i$次相遇 | 毫厘 |
| $y_j$ | 第$j$次错过 | 千里 |

: 符号说明 {#tbl-符号说明}

### 代码块输出

例如：

````markdown
```{{python}}
#| label: fig-螺旋
#| fig-cap: "A line plot on a polar axis"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

# “#| 参数”可以设置代码块运行和输出机制
````
显示为：
```{python}
#| echo: false
#| label: fig-螺旋
#| fig-cap: "螺旋图"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

### 交叉引用

本节介绍Quarto的交叉引用，我们在先前小节的数学公式、图片和表格中分别标记了``{#eq-einstein}``、``{#fig-MIT}``和``{#tbl-符号说明}``，我们可以在文中任何地方引用他们，格式为``[-@...]``，例如：
````markdown
[-@tbl-符号说明]
````
显示为：[-@tbl-符号说明]

由于我们在上一节中的代码段中添加了标签``#| label: fig-螺旋``，所以我们也可以引用螺旋图[-@fig-螺旋]。

### 数学模板的使用

1. 下载模板文件``cumcm.tex``和范例图片``mit_logo.png``：

::: {.callout-note appearance="minimal"}
<i class="bi bi-journal-code"></i> [Download cumcm.tex](_cumcm.tex){download="cumcm.tex"}
:::

::: {.callout-note appearance="minimal"}
<i class="bi bi-file-earmark-image"></i> [Download mit_logo.png](_mit_logo.png){download="mit_logo.png"}
:::

2. 下载你的编辑器所对应文件格式：

::: {.callout-note appearance="minimal"}
<i class="bi bi-journal-code"></i> [Download Jupyter-Demo](_Jupyter-Demo.ipynb){download="Jupyter-Demo.ipynb"}
:::

::: {.callout-note appearance="minimal"}
<i class="bi bi-journal-code"></i> [Download RStudio-Demo](_RStudio-Demo.qmd){download="RStudio-Demo.qmd"}
:::

3. 将下载的三个文件放入同一文件夹中，编译对应文件查看结果。

## 资料与工具

### 资料

[Quato官网](quarto.org)

[一份其实很短的LaTeX入门文档](https://liam.page/2014/09/08/latex-introduction/)

[使用knitr包输出各种类型的LaTeX表格](https://haozhu233.github.io/kableExtra/awesome_table_in_pdf.pdf)

### 工具

[在线LaTeX公式编辑器](https://latexlive.com/home)

[流程图：Draw.io](https://www.draw.io/index.html)

[思维导图：XMind](https://www.xmind.cn/)
